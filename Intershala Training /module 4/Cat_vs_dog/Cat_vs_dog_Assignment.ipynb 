{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "orig_nbformat": 4,
    "language_info": {
      "name": "python",
      "version": "3.8.10",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3.8.10 64-bit ('Tensflow_m1': conda)"
    },
    "interpreter": {
      "hash": "d831c2d24441031cca94d340b013336142f7d1230b8c16f4f05968ed3e64b669"
    },
    "colab": {
      "name": "Cat_vs_dog.ipynb",
      "provenance": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "NbKh6YViso3p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9162fb12-a741-4df5-be14-c1621ec1f542"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O8cJuL5wtn98"
      },
      "source": [
        "## Importing the libraries "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-Dd4t7qtr9Xq"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras import models\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras.applications import VGG16"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BIq5g5yKtw9B"
      },
      "source": [
        "## Importint the datasets\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ma5_1A1qtFEe"
      },
      "source": [
        "training_dir = '/content/drive/MyDrive/tensorflow/cat vs dog/cats_and_dogs/train'\n",
        "test_dir = '/content/drive/MyDrive/tensorflow/cat vs dog/cats_and_dogs/test'\n",
        "validate_dir = '/content/drive/MyDrive/tensorflow/cat vs dog/cats_and_dogs/validation'"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V0KQB27Vu-dW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "839b828b-ff9b-42b1-a0bc-f7892e68d534"
      },
      "source": [
        "train_datagen = ImageDataGenerator(rescale=1./255,\n",
        "                                   rotation_range = 40,\n",
        "                                   horizontal_flip = True,\n",
        "                                   shear_range = 0.2,\n",
        "                                   zoom_range = 0.2,\n",
        "                                   width_shift_range =0.2,\n",
        "                                   height_shift_range = 0.2)\n",
        "\n",
        "validate_datagen = ImageDataGenerator(rescale=1./255)\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    training_dir, \n",
        "    target_size = (150,150), \n",
        "    class_mode = 'binary',\n",
        "    batch_size = 20\n",
        ")\n",
        "\n",
        "validate_generator = validate_datagen.flow_from_directory(\n",
        "    validate_dir,\n",
        "    target_size =(150,150),\n",
        "    class_mode = 'binary',\n",
        "    batch_size = 20\n",
        "\n",
        ")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hx0WtZCW5reQ",
        "outputId": "4c62d755-428d-4009-cea4-19b6a5334c7a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "convo_base = VGG16(weights='imagenet',\n",
        "                   include_top=False,\n",
        "                   input_shape=(150,150,3))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "58892288/58889256 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xbu3cvJf6I0W",
        "outputId": "6a9a483b-a246-4962-92b9-f69d380d2c86",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "convo_base.summary()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"vgg16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 150, 150, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 150, 150, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 150, 150, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 75, 75, 64)        0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 75, 75, 128)       73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 75, 75, 128)       147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 37, 37, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 37, 37, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 37, 37, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 37, 37, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 18, 18, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 18, 18, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 9, 9, 512)         0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 4, 4, 512)         0         \n",
            "=================================================================\n",
            "Total params: 14,714,688\n",
            "Trainable params: 14,714,688\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3lwIQ2Pyt4C7"
      },
      "source": [
        "## Buliding the model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k8f1l3MDwhEV"
      },
      "source": [
        "model = models.Sequential()\n",
        "model.add(convo_base)\n",
        "model.add(keras.layers.Flatten())\n",
        "model.add(keras.layers.Dense(256,activation='relu'))\n",
        "model.add(keras.layers.Dense(1,activation='sigmoid'))"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uuKcIZ8GyxHT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb512f27-442c-48c0-97c4-878b70ff9cd9"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 256)               2097408   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 257       \n",
            "=================================================================\n",
            "Total params: 16,812,353\n",
            "Trainable params: 16,812,353\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7vOSrYmLy0lA"
      },
      "source": [
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(learning_rate=1e-4),\n",
        "              metrics=['acc'])"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MH4YAGjH8c3g"
      },
      "source": [
        "check_point = keras.callbacks.ModelCheckpoint(\"/content/drive/MyDrive/tensorflow/Untitled Folder/CNN_Project_Model-{epoch:02d}.h5\")"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UPXYhF87uAZ7"
      },
      "source": [
        "## Training the model "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tqirxXLr0Gdr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "92562f86-880c-478b-b8f2-262d90238816"
      },
      "source": [
        "trained_model = model.fit(train_generator,\n",
        "                          validation_data=validate_generator,\n",
        "                          steps_per_epoch=100,\n",
        "                          epochs=30,\n",
        "                          validation_steps=50,\n",
        "                          callbacks=[check_point])"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "100/100 [==============================] - 725s 7s/step - loss: 0.7136 - acc: 0.5405 - val_loss: 0.5920 - val_acc: 0.7630\n",
            "Epoch 2/30\n",
            "100/100 [==============================] - 24s 236ms/step - loss: 0.6371 - acc: 0.6555 - val_loss: 0.4229 - val_acc: 0.8030\n",
            "Epoch 3/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.5377 - acc: 0.7235 - val_loss: 0.3702 - val_acc: 0.8480\n",
            "Epoch 4/30\n",
            "100/100 [==============================] - 23s 225ms/step - loss: 0.4916 - acc: 0.7730 - val_loss: 0.3848 - val_acc: 0.8470\n",
            "Epoch 5/30\n",
            "100/100 [==============================] - 24s 237ms/step - loss: 0.4187 - acc: 0.8205 - val_loss: 0.2231 - val_acc: 0.9090\n",
            "Epoch 6/30\n",
            "100/100 [==============================] - 22s 222ms/step - loss: 0.3525 - acc: 0.8520 - val_loss: 0.2533 - val_acc: 0.9020\n",
            "Epoch 7/30\n",
            "100/100 [==============================] - 24s 236ms/step - loss: 0.3371 - acc: 0.8575 - val_loss: 0.1645 - val_acc: 0.9350\n",
            "Epoch 8/30\n",
            "100/100 [==============================] - 22s 221ms/step - loss: 0.3366 - acc: 0.8640 - val_loss: 0.2152 - val_acc: 0.9140\n",
            "Epoch 9/30\n",
            "100/100 [==============================] - 24s 236ms/step - loss: 0.2854 - acc: 0.8835 - val_loss: 0.1712 - val_acc: 0.9370\n",
            "Epoch 10/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.2991 - acc: 0.8980 - val_loss: 0.2195 - val_acc: 0.9100\n",
            "Epoch 11/30\n",
            "100/100 [==============================] - 23s 233ms/step - loss: 0.2474 - acc: 0.9000 - val_loss: 0.2514 - val_acc: 0.8780\n",
            "Epoch 12/30\n",
            "100/100 [==============================] - 23s 233ms/step - loss: 0.2465 - acc: 0.9115 - val_loss: 0.2439 - val_acc: 0.9360\n",
            "Epoch 13/30\n",
            "100/100 [==============================] - 23s 231ms/step - loss: 0.2832 - acc: 0.8850 - val_loss: 0.1788 - val_acc: 0.9300\n",
            "Epoch 14/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.2398 - acc: 0.9115 - val_loss: 0.1579 - val_acc: 0.9520\n",
            "Epoch 15/30\n",
            "100/100 [==============================] - 23s 234ms/step - loss: 0.2738 - acc: 0.9175 - val_loss: 0.2649 - val_acc: 0.9080\n",
            "Epoch 16/30\n",
            "100/100 [==============================] - 23s 229ms/step - loss: 0.2312 - acc: 0.9105 - val_loss: 0.2171 - val_acc: 0.9410\n",
            "Epoch 17/30\n",
            "100/100 [==============================] - 23s 228ms/step - loss: 0.2272 - acc: 0.9180 - val_loss: 0.2687 - val_acc: 0.9060\n",
            "Epoch 18/30\n",
            "100/100 [==============================] - 23s 226ms/step - loss: 0.2453 - acc: 0.9130 - val_loss: 0.2495 - val_acc: 0.9110\n",
            "Epoch 19/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.2236 - acc: 0.9135 - val_loss: 0.1121 - val_acc: 0.9460\n",
            "Epoch 20/30\n",
            "100/100 [==============================] - 24s 235ms/step - loss: 0.2421 - acc: 0.9125 - val_loss: 0.1699 - val_acc: 0.9270\n",
            "Epoch 21/30\n",
            "100/100 [==============================] - 22s 224ms/step - loss: 0.2113 - acc: 0.9215 - val_loss: 0.1709 - val_acc: 0.9270\n",
            "Epoch 22/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.2833 - acc: 0.9195 - val_loss: 0.2943 - val_acc: 0.9280\n",
            "Epoch 23/30\n",
            "100/100 [==============================] - 24s 235ms/step - loss: 0.2491 - acc: 0.9235 - val_loss: 0.2226 - val_acc: 0.9170\n",
            "Epoch 24/30\n",
            "100/100 [==============================] - 22s 223ms/step - loss: 0.1972 - acc: 0.9245 - val_loss: 4.8615 - val_acc: 0.7620\n",
            "Epoch 25/30\n",
            "100/100 [==============================] - 23s 225ms/step - loss: 0.2507 - acc: 0.9160 - val_loss: 0.2239 - val_acc: 0.9260\n",
            "Epoch 26/30\n",
            "100/100 [==============================] - 23s 233ms/step - loss: 0.2067 - acc: 0.9265 - val_loss: 0.3209 - val_acc: 0.9200\n",
            "Epoch 27/30\n",
            "100/100 [==============================] - 23s 234ms/step - loss: 0.2764 - acc: 0.9135 - val_loss: 0.2405 - val_acc: 0.9290\n",
            "Epoch 28/30\n",
            "100/100 [==============================] - 23s 226ms/step - loss: 0.2619 - acc: 0.9190 - val_loss: 0.2283 - val_acc: 0.8840\n",
            "Epoch 29/30\n",
            "100/100 [==============================] - 22s 221ms/step - loss: 0.2086 - acc: 0.9265 - val_loss: 0.5615 - val_acc: 0.9110\n",
            "Epoch 30/30\n",
            "100/100 [==============================] - 24s 236ms/step - loss: 0.1993 - acc: 0.9295 - val_loss: 0.1675 - val_acc: 0.9430\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2sGvjhYfuEGf"
      },
      "source": [
        "## Visualising the training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K35OlDXI6xBW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "95e68f30-6b8c-407e-d220-50c1c91e1665"
      },
      "source": [
        "pd.DataFrame(trained_model.history).plot()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2d0028c090>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GLCMtZ3NuL_w"
      },
      "source": [
        "## Evaluating the "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yhOnvccq7mQf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1712e80c-fcc3-408f-d503-9c924885cfe7"
      },
      "source": [
        "\n",
        "\n",
        "test_generator = validate_datagen.flow_from_directory(\n",
        "    test_dir,\n",
        "    target_size =(150,150),\n",
        "    class_mode = 'binary',\n",
        "    batch_size = 20\n",
        "\n",
        ")"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 1010 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tP3ky_2mG0RE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6b99c4c5-922e-4cdf-b8e4-259a07b660c5"
      },
      "source": [
        "model.evaluate(test_generator,steps =50)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 222s 5s/step - loss: 0.3122 - acc: 0.9430\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.31217673420906067, 0.9430000185966492]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w0plUVHZ2z3C"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ASfmZHQP65U8"
      },
      "source": [
        "model.save('/content/drive/MyDrive/tensorflow/Untitled Folder/v3.h5')"
      ],
      "execution_count": 25,
      "outputs": []
    }
  ]
}